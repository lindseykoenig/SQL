#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

#1. How many orders were placed in January? 
SELECT COUNT(orderID) 
FROM BIT_DB.JanSales
WHERE length(orderID)=6 
AND orderID <> 'Order_ID';

#2. How many of those orders were for an iPhone? 
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE Product = 'iPhone'
AND length(orderID)=6 
AND orderID <> 'Order_ID';

#3. Select the customer account numbers for all the orders that were placed in February. 
SELECT distinct customer.acctnum
FROM BIT_DB.customers customer
INNER JOIN BIT_DB.FebSales Feb
ON customer.order_id=Feb.orderid
WHERE length(orderID)=6 
AND orderID <> 'Order_ID';

#4. Which product was the cheapest one sold in January, and what was the price? 
SELECT distinct Product, MIN(price)
FROM BIT_DB.JanSales Jan
WHERE price IN (SELECT MIN(price) FROM BIT_DB.JanSales);

#5. What is the total revenue for each product sold in January?
SELECT SUM(Quantity)*price as revenue, product
FROM BIT_DB.JanSales
GROUP BY product;

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT Product, SUM(Quantity), SUM(Quantity)*price as revenue
FROM BIT_DB.FebSales
WHERE location= '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;

#7. How many customers ordered more than 2 products at a time, and what was the average amount spent for those customers? 
SELECT COUNT(distinct customer.acctnum), AVG(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers customer
ON customer.order_id= Feb.orderid
WHERE Feb.Quantity > 2
AND length(orderID)=6 
AND orderID <> 'Order_ID'

#8. List all the order dates between February 13, 2019 and February 18, 2019.
SELECT orderdate FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00';

#8. What location was the order placed on February 18, 2019 at 01:35 sent to?
SELECT location FROM BIT_DB.FebSales
WHERE orderdate = '02/18/19 01:35';

#9. How many items were purchased on February 18, 2019?
SELECT sum(quantity)
FROM BIT_DB.FebSales
WHERE orderdate like '02/18/19%';

#10. List all products that are a form of batteries.
SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product like '%Batteries%';

#11. List the products and price of the products that have a price ending in 99. 
SELECt distinct Product, price 
FROM BIT_DB.FebSales
WHERE price like '%99';

#12. List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT Product, SUM(Quantity)
FROM BIT_DB.FebSales
WHERE location like '%LA%'
GROUP BY Product

#13. Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
SELECT distinct location, COUNT(orderID)
FROM BIT_DB.JanSales
WHERE location like '%NY%'
AND length(orderID)=6
AND orderID <> 'Order_ID'
GROUP BY  location
HAVING count(orderID)>2; 

#14. How many of each type of headphone were sold in February?
SELECT Product, SUM(Quantity)
FROM BIT_DB.FebSales
WHERE Product like '%Headphones%'
GROUP BY Product;

#15. What was the average amount spent per account in February? 
SELECT AVG(price*quantity)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON Feb.orderID= cust.order_ID
WHERE length(orderID)=6 
AND orderID <> 'Order_ID';

#16. What was the average quantity of products purchased per account in February?
SELECT SUM(quantity)/ COUNT(cust.acctnum)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON Feb.orderID=cust.order_ID
WHERE length(orderID)=6 
AND orderID <> 'Order_ID';

#17. Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT distinct Product, SUM(quantity*price) as revenue
FROM BIT_DB.JanSales
ORDER BY revenue desc
LIMIT 1;

